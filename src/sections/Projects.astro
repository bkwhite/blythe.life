---
import type { ImageMetadata, MarkdownInstance } from "astro";

import { Image } from "astro:assets";

import SiteSection from "../components/SiteSection.astro";

interface Project {
	company: string;
	type: string;
	link: string;
	images: string[];
	highlightColor: string;
	hidden?: boolean;
}

const images = import.meta.glob<{ default: ImageMetadata }>(
	"/src/assets/projects/*.png"
);

const projects = (
	Object.values(
		import.meta.glob("../content/projects/*.md", { eager: true })
	) as MarkdownInstance<Project>[]
).filter((p) => p.frontmatter.hidden !== true);

console.log(images);

const getImage = (image: string) => {
	const key = Object.keys(images).find((key) => key.includes(image));

	if (!key) {
		return null;
	}

	return images[key];
};
---

<SiteSection sectionName="projects"
	>{projects.map(({ Content, ...project }) => (
		<div class="project">
			<a
				href={project.frontmatter.link}
				target="_blank"
				rel="noopener noreferrer">
				<h3>ðŸ”— {project.frontmatter.company}</h3>
			</a>
			<h5>{project.frontmatter.type}</h5>
			<Content />
			<div class="image-container">
				{project.frontmatter.images.map((image) => {
					const gotImage = getImage(image)

					if (!gotImage) return null

					return (
						<Image
							class="project-image"
							style={`box-shadow: ${project.frontmatter.highlightColor} 0 0 16px; height: auto;`}
							src={gotImage()}
							alt={project.frontmatter.company}
						/>
					)
				})}
			</div>
		</div>
	))}
</SiteSection>

<style>
	.project-image {
		animation: shadows 10s infinite;
		border-radius: 12px;
		width: 100%;
	}

	a {
		color: unset;
	}

	.project {
		margin-bottom: calc(var(--basePadding) * 4);
	}

	.image-container {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 16px;
		width: 100%;
	}
</style>
